#+TITLE: Literate Configuration

* Prelude

  This is the beginning of a literate emacs configuration.

  Aside from defining some functions I don't want mixed in with my
  configuration, I also load some functions containing information I don't want
  checked into the public repo.

  #+name: prelude
  #+BEGIN_SRC emacs-lisp
    (defun read-string-from-file (path)
      "Return filePath's file content as a lisp form."
      (with-temp-buffer
        (insert-file-contents path)
        (car (read-from-string (buffer-string)))))
  #+END_SRC
* Look & Feel

  First things first, let's make emacs pretty.

  #+name: look-and-feel
  #+BEGIN_SRC emacs-lisp
    (load-theme 'tango-dark)
    (blink-cursor-mode 0)
    (setq initial-scratch-message "")
    (setq inhibit-startup-message t)
    (setq inhibit-startup-echo-area-message "isaachodes")
    (menu-bar-mode -1)
    (if (boundp tool-bar-mode) (tool-bar-mode -1))
    (if (boundp 'scroll-bar-mode)  (scroll-bar-mode -1))
    (show-paren-mode 1)
    (set-face-attribute 'mode-line nil
                        :foreground "gray100" :background "gray10"
                        :inverse-video nil
                        :box '(:line-width 6 :color "gray20" :style nil))
    (set-face-attribute 'mode-line-inactive nil
                        :foreground "gray30" :background "gray10"
                        :inverse-video nil
                        :box '(:line-width 6 :color "gray10" :style nil))
  #+END_SRC
* Packages

  Load up *package* & ensure that *use-package* will install all other packages.

  #+name: packages
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (package-initialize)
    (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                             ("marmalade" . "https://marmalade-repo.org/packages/")
                             ("melpa" . "https://melpa.org/packages/")))
  #+END_SRC

  We load and configure all packages with the glorious [[https://github.com/jwiegley/use-package][use-package]] mode.

  #+name: modes
  #+BEGIN_SRC emacs-lisp
    (require 'use-package)
  #+END_SRC

  This will ensure all our packages are installed (that are wrapped in
  use-package). We must first manually install use-package.

  #+name: modes
  #+BEGIN_SRC emacs-lisp
    (setq use-package-always-ensure t)
  #+END_SRC

* Defaults

  Here we set some defaults which generally make emacs a more well-behaved
  editor.

  #+name: defaults
  #+BEGIN_SRC emacs-lisp
    (column-number-mode t)
    (setq compilation-scroll-output t)
    (setq kill-ring-max 500)
    (setq js-indent-level 2)
    (setq tramp-default-method "ssh")
    (setq auto-save-default nil)
    (global-set-key "\M-N" "\C-u3\C-v")
    (global-set-key "\M-P" "\C-u3\M-v")
    (require 'uniquify)
    (setq-default uniquify-buffer-name-style 'forward)
    (require 'saveplace)
    (setq-default save-place t
                  save-place-file (concat user-emacs-directory "places"))
    (setq-default indent-tabs-mode nil
                  fill-column 80
                  show-trailing-whitespace t
                  auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
                  enable-recursive-minibuffers t
                  apropos-do-all t
                  backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                           "backups"))))
  #+END_SRC
* Modes

  Here we activate modes and do a lot of stuff which should be split out into
  smaller code blocks.

  And configure most of them...

** Main
  #+name: modes
  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :init (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (setq ivy-re-builders-alist
            '((ivy-switch-buffer . ivy--regex-plus)
              (t . ivy--regex-fuzzy))))

    (use-package flx)

    (use-package counsel
      :init
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file))

    (use-package swiper)

    (defun ihodes/set-exec-path-from-shell-PATH ()
      "Set up Emacs' `exec-path' and PATH environment variable to match that used by the user's shell.

        This is particularly useful under Mac OSX, where GUI apps are not started from a shell.

        from http://stackoverflow.com/questions/8606954/path-and-exec-path-set-but-emacs-does-not-find-executable"
      (interactive)
      (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" "" (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
        (setenv "PATH" path-from-shell)
        (setq exec-path (split-string path-from-shell path-separator))))

    (use-package tuareg
      :init
      ;; Setup environment variables using opam
      (ihodes/set-exec-path-from-shell-PATH)
      (dolist (var (car (read-from-string (shell-command-to-string "opam config env --sexp"))))
        (setenv (car var) (cadr var)))
      ;; Update the emacs path
      (setq exec-path (append (parse-colon-path (getenv "PATH"))
                              (list exec-directory)))
      ;; Automatically load utop.el
      (autoload 'utop "utop" "Toplevel for OCaml" t)
      (autoload 'utop-minor-mode "utop" "Toplevel for OCaml" t)
      (add-hook 'tuareg-mode-hook 'utop-setup-ocaml-buffer)
      (add-hook 'typerex-mode-hook 'utop-setup-ocaml-buffer)
      (add-hook 'tuareg-mode-hook 'merlin-mode)
      (add-hook 'tuareg-mode-hook 'ocp-setup-indent)
      (add-hook 'tuareg-mode-hook
                (lambda ()
                  (define-key tuareg-mode-map (kbd "C-M-<tab>") #'ocamlformat)
                  (add-hook 'before-save-hook #'ocamlformat-before-save)))
      (setq merlin-use-auto-complete-mode 'easy)
      (setq merlin-command 'opam)
      ;;(add-to-list 'company-backends 'merlin-company-backend)
      (add-hook 'merlin-mode-hook 'company-mode)

      (setq opam-share
            (substring
             (shell-command-to-string "opam config var share 2> /dev/null") 0 -1))
      (add-to-list 'load-path (concat opam-share "/emacs/site-lisp"))
      (setq ocp-indent-config "strict_with=always,with=0,strict_comments=false")
      (require 'ocp-indent))

    (defun ihodes/send-to-utop ()
      "Send selected text to *utop*."
      (interactive)
      (progn (let ((text (buffer-substring-no-properties
                          (region-beginning) (region-end))))
               (switch-to-buffer-other-window "*utop*") (goto-char (point-max))
               (insert (concat text " ;;")))))

        ;;; Hydra bindings
    (use-package hydra
      :init
      (defhydra ihodes/hydra/add-note (:color blue :hint nil)
        "
    Add a note with a special name.\n
    _w_: work          _p_: personal

    "
        ("w" (ihodes/add-custom-note "~/text/db/work/"))
        ("p" (ihodes/add-custom-note "~/text/db/notes/"))
        ("c" nil "cancel")))

    (use-package merlin
      :bind ("C-c s" . ihodes/send-to-utop)
            ("C-c d" . merlin-document)
      :init (unbind-key "C-c e"))

    (use-package smex
      :ensure smex
      :bind ("M-x" . smex)
      :init
      (unbind-key "M-x")
      (unbind-key "<menu>")
      (smex-initialize))

    (use-package flycheck
      :diminish flycheck-mode
      :init
      (add-hook 'after-init-hook 'global-flycheck-mode)
      (setq auto-mode-alist (remove (rassoc 'html-mode auto-mode-alist)
                                    auto-mode-alist)))

    (use-package ace-jump-mode
      :bind ("M-o" . ace-jump-mode))

    (use-package ace-window
      :bind ("C-x p" . ace-window))

    (use-package clojure-mode)

    (use-package paredit
      :init
      (dolist (x '(scheme emacs-lisp lisp clojure))
        (add-hook
         (intern (concat (symbol-name x) "-mode-hook")) 'paredit-mode)))

    (use-package web-mode
      :mode (("\\.phtml\\'" . web-mode)
             ("\\.jsx\\'" . web-mode)
             ("\\.tpl\\.php\\'" . web-mode)
             ("\\.jsp\\'" . web-mode)
             ("\\.as[cp]x\\'" . web-mode)
             ("\\.erb\\'" . web-mode)
             ("\\.ejs\\'" . web-mode)
             ("\\.mustache\\'" . web-mode)
             ("\\.djhtml\\'" . web-mode)
             ("\\.html?\\'" . web-mode)
             ("\\.css?\\'" . web-mode))
      :config
      (setq web-mode-markup-indent-offset 2
            web-mode-css-indent-offset 2
            web-mode-engines-alist '(("erb" . "\\.ejs\\'")))

      (bind-keys :map web-mode-map ("C-c /" . web-mode-element-close)))

    (use-package smart-mode-line
      :init
      (setq sml/no-confirm-load-theme t)
      (sml/setup)
      (sml/apply-theme 'dark)
      (add-to-list 'sml/replacer-regexp-list '("^~/workspace/" ":W:") t)
      (add-to-list 'sml/hidden-modes " Undo-Tree")
      (add-to-list 'sml/hidden-modes " MRev")
      (add-to-list 'sml/hidden-modes " Paredit")
      (add-to-list 'sml/hidden-modes " hl-s")
      (add-to-list 'sml/hidden-modes " Helm")
      (add-to-list 'sml/hidden-modes " company")
      (add-to-list 'sml/hidden-modes " yas"))

    (use-package company
      :init
      (global-company-mode t)
      (add-to-list 'company-backends 'company-anaconda))

    (use-package ag
      :bind ("<f2>" . ag-project)
      :init (setq ag-highlight-search t))

    (use-package visual-regexp
      :bind (("C-c q" . vr/query-replace)
             ("C-c r" . vr/replace)
             ("s-c" . vr/mc-mark)))

    (use-package browse-kill-ring
      :bind ("C-M-y" . browse-kill-ring))

    (use-package undo-tree-mode
      :ensure undo-tree
      :init (global-undo-tree-mode)
      :bind (("C-x C-u" . undo-tree-undo)
             ("C-x C-r" . undo-tree-redo))
      :config
      ;; autosave the undo-tree history
      (setq undo-tree-history-directory-alist
            `((".*" . ,temporary-file-directory)))
      (setq undo-tree-auto-save-history t))

    (use-package yasnippet
      :init
      ;; (yas-reload-all)
      (setq yas-snippet-dirs
          '("~/.emacs.d/snippets"))
      (add-hook 'GFM-mode #'yas-minor-mode)
      :bind
      ("C-<tab>" . yas-expand))

    (use-package haskell-mode
      :mode "\\.hs\\'"
      :init
      (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation))

    (use-package magit
      :bind ("C-x g" . magit-status)
      :config
      ;; https://github.com/magit/magit/issues/1953
      (setq magit-restore-window-configuration t) ;; the default
      (setq magit-status-buffer-switch-function
            (lambda (buffer)
              (pop-to-buffer buffer)
              (delete-other-windows))))

    (use-package git-timemachine)

    (use-package fullframe
      :init
      (fullframe magit-status magit-mode-quit-window))

    (use-package projectile
      :bind ("s-p" . projectile-commander)
      :init
      (progn
        (projectile-global-mode)
        (setq projectile-mode-line
              '(:eval (format " @:%s" (projectile-project-name))))))

    (use-package rainbow-delimiters
      :init
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
  #+END_SRC

  Finally we quick'n'dirtily set some little text modes.

  #+name: modes
  #+BEGIN_SRC emacs-lisp
    (defvar ihodes/text-modes
      '(("\\.avpr?\\'" . js-mode)
        ("\\.avdl?\\'" . c-mode)
        ("\\.yml\\'" . yaml-mode)
        ("\\.markdown\\'" . gfm-mode)
        ("\\.md\\'" . gfm-mode)))

    (dolist (mm ihodes/text-modes)
      (add-to-list 'auto-mode-alist mm))
  #+END_SRC

  (And some misc. additional code...)

  #+name: modes
  #+BEGIN_SRC emacs-lisp
    ;; https://github.com/purcell/exec-path-from-shell
    (use-package exec-path-from-shell
      :init
      (when (memq window-system '(mac ns))
        (exec-path-from-shell-initialize)))

    (add-hook 'sql-interactive-mode-hook '(lambda () (toggle-truncate-lines t)))
  #+END_SRC

** Journal & Notes

I use emacs + markdown to journal and take notes. This is synced via Dropbox so
that I can 1) have my notes saved somewhere safe and 2) view and edit notes on
my mobile device.

deft and markdown-mode do much of the heavy lifting here. I use local checkouts
so that I can pick up my modifications to these libraries as soon as I need
them.

#+name: journaling
#+BEGIN_SRC emacs-lisp
  (use-package mmm-mode
    :init
    ;; from http://jblevins.org/log/mmm
    (defun mmm-markdown-auto-class (lang &optional submode)
      "Define a mmm-mode class for LANG in `markdown-mode' using SUBMODE.
         If SUBMODE is not provided, use `LANG-mode' by default."
      (let ((class (intern (concat "gfm-" lang)))
            (submode (or submode (intern (concat lang "-mode"))))
            (front (concat "^```" lang "[\n\r]+"))
            (back "^```$"))
        (mmm-add-classes (list (list class :submode submode :front front :back back)))
        (mmm-add-mode-ext-class 'gfm-mode nil class)))
    (mapc 'mmm-markdown-auto-class
          '("awk" "bibtex" "c" "cpp" "css" "html" "latex" "lisp" "elisp" "makefile"
            "markdown" "python" "r" "ruby" "sql" "stata" "xml" "clojure" "scheme"
            "js" "ruby"))
    (mmm-markdown-auto-class "shell" 'shell-script-mode)
    ;; TODO: this is an error
    ;;       (mmm-markdown-auto-class "ocaml" 'tuareg-mode)
    (mmm-markdown-auto-class "javascript" 'js-mode)
    (add-hook 'markdown-mode-hook 'mmm-mode)
    (setq mmm-parse-when-idle 't))

  (use-package markdown-mode
    :load-path "~/workspace/markdown-mode"
    :bind
    (:map markdown-mode-map
          ("C-c >" .  org-time-stamp)
          ("C-c <" .  org-date-from-calendar)
          ("C-c m" . mmm-parse-buffer)
          ("C-c j" . ihodes/hydra/start-new-journal-entry/body))
    :init
    (defun s-trim-right (s)
      "Remove whitespace at the end of S."
      (if (string-match "[ \t\n\r]+\\'" s)
          (replace-match "" t t s)
        s))
    (custom-set-faces
     '(markdown-header-face
       ((t (:inherit font-lock-function-name-face
            :weight bold :family "variable-pitch"))))
     '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.7))))
     '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.4))))
     '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.2)))))
    (setq markdown-command "marked --gfm --tables --smart-lists --breaks")
    (setq markdown-asymmetric-header t)
    (setq markdown-gfm-additional-languages
          '("ocaml" "python" "javascript" "js" "r" "java" "clojure" "scheme"))
    (require 'semantic/sb)                ; so that we can use CEDET's setq-mode-local
    (setq-mode-local markdown-mode show-trailing-whitespace nil))

  (use-package deft
    :load-path "~/workspace/deft/"
    :bind
    (("<f7>" . ihodes/hydra/add-note/body)
     ("<f8>" . deft)
     ("<f9>" . ihodes/edit-work-week-note)
     ("<f10>" . ihodes/edit-personal-week-note)
     ("<f12>" . ihodes/edit-current-months-journal)
     ("C-c C-r" . revert-buffer) ;; used to reload buffer, if e.g. Dropbox edits it.
     :map deft-mode-map
     ("C-c C-j" . ihodes/deft-toggle-journal)
     ("C-c C-w" . ihodes/deft-toggle-work)
     ("C-c C-n" . ihodes/deft-toggle-notes))
    :init
    (setq ihodes/deft-name-map
          '(("journal" . "db/journal/")
            ("work" . "db/work/")
            ("notes" . "db/notes/")))
    (setq ihodes/deft-ignore-file-directories '("journal"))
    (defun ihodes/update-deft-ignore-file-regexp ()
      (interactive)
      (let* ((deft-res-list
               (mapcar (lambda (spec)
                         (if (member (car spec) ihodes/deft-ignore-file-directories)
                             (cdr spec) nil)) ihodes/deft-name-map))
             (deft-res-list (cl-remove-if-not 'identity deft-res-list)))
        (if deft-res-list
            (setq deft-ignore-file-regexp (mapconcat 'identity deft-res-list "\\|"))
          (setq deft-ignore-file-regexp "\\(?:^$\\)")))
      (deft-refresh))
    (defun ihodes/toggle-index-category (name)
      "Shows/hides a category in Deft."
      (interactive)
      (if (member name ihodes/deft-ignore-file-directories)
          (let ((ls (cl-remove-if (lambda (s) (string= s name)) ihodes/deft-ignore-file-directories)))
            (setq ihodes/deft-ignore-file-directories ls))
        (let ((ls (cons name ihodes/deft-ignore-file-directories)))
          (setq ihodes/deft-ignore-file-directories ls)))
      (ihodes/update-deft-ignore-file-regexp))
    (defun ihodes/deft-toggle-journal () (interactive) (ihodes/toggle-index-category "journal"))
    (defun ihodes/deft-toggle-work () (interactive) (ihodes/toggle-index-category "work"))
    (defun ihodes/deft-toggle-notes () (interactive) (ihodes/toggle-index-category "notes"))
    (defun ihodes/add-custom-note (subdirectory)
      (let ((note-name
             (read-file-name "What should the title be? " subdirectory)))
        (find-file note-name)))
    (defun ihodes/edit-work-week-note () (interactive) (ihodes/edit-current-weeks-note "~/text/db/work/"))
    (defun ihodes/edit-personal-week-note () (interactive) (ihodes/edit-current-weeks-note "~/text/db/notes/"))
    (defun ihodes/last-monday ()
      "Return the previous Monday as a time value, or current day, if today is Monday."
      (let* ((dow (nth 6 (decode-time)))
             (delta (% (+ dow 6) 7))
             (days-delta (seconds-to-time (* delta 24 60 60 ))))
        (time-subtract (current-time) days-delta)))
    (defun ihodes/edit-current-weeks-note (directory)
      "Edit the note for the current week, starting on Monday, in
      the given directory"
      (interactive "DDeft Subdirectory: ")
      (let* ((new-time (ihodes/last-monday))
             (date (format-time-string "%Y-%m-%d" new-time))
             (filename (concat date ".md"))
             (path (concat directory filename)))
        (find-file path)
        (if (file-exists-p path)
            t
          (insert "# Monday\n\n# Tuesday\n\n# Wednesday\n\n# Thursday\n\n# Friday\n\n"))))
    (defun ihodes/edit-current-months-journal ()
      "Edit the journal text in ~/text/db/journal for the current month."
      (interactive)
      (let* ((date (format-time-string "%Y-%m"))
             (filename (concat date ".md"))
             (path (concat deft-directory "/db/journal/" filename)))
        (find-file path)))
    (setq deft-auto-save-interval 0)
    (setq deft-directory "~/text")
    (setq deft-use-filename-as-title t)
    (setq deft-prefix-filename-title-with-subdirectory t)
    (setq deft-extensions '("md" "txt" "tex" "org" "markdown"))
    (setq deft-recursive t))

  (use-package visual-fill-column
    :init
    (setq fill-column 80)
    (defun ihodes/activate-visual-line-mode-for-notes ()
      "Activate soft line-wrapping when inside a text file that can
      be read in Dropbox; this lets us view them nicely on a mobile
      device as well as on desktop."
      (when (and (string-match "text/" (buffer-file-name))
                 (string-match "\\.md\\'" (buffer-file-name)))
        (progn (visual-fill-column-mode t)
               (visual-line-mode t)
               (adaptive-wrap-prefix-mode t))))
    (add-hook 'find-file-hook 'ihodes/activate-visual-line-mode-for-notes))

  (use-package adaptive-wrap)
#+END_SRC

** Org

Very rudimentary customization of ~org-mode~.

Primarily we set our [[http://mobileorg.ncogni.to/][MobileOrg]] directory so that we can sync with the iPhone (or
Android!) app. We also enable support for a variety of languages.

#+name: org-mode
#+BEGIN_SRC emacs-lisp
  (bind-key "C-c c" 'org-capture)
  (bind-key "C-c a" 'org-agenda)

  (setq org-directory "~/org/")
  (setq org-default-notes-file "~/org/notes.org")
  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")


  (setq org-src-fontify-natively nil)

  (setq org-modules '(org-info
                      org-habit))

  (org-load-modules-maybe t)

  (defun ihodes/org-link-at-point ()
    "Return the link of the org-link at point."
    (interactive)
    (let* ((el (org-element-context))
           (map (org-element-map el)))
      (message (org-element-property :link map))))

  (use-package org
    :bind
    ("C-c i" . ispell)
    ("M-I" . org-toggle-inline-images)
    ("M-i" . org-toggle-inline-image)
    ("C-M-c" . ihodes/org-link-at-point))

#+END_SRC

This lets us drag'n'drop image links into org-mode.

#+name: org-mode
#+BEGIN_SRC emacs-lisp
(defun my-dnd-func (event)
  (interactive "e")
  (goto-char (nth 1 (event-start event)))
  (x-focus-frame nil)
  (let* ((payload (car (last event)))
         (type (car payload))
         (fname (cadr payload))
         (img-regexp "\\(png\\|jp[e]?g\\)\\>"))
    (cond
     ;; insert image link
     ((and  (eq 'drag-n-drop (car event))
            (eq 'file type)
            (string-match img-regexp fname))
      (insert (format "[[%s]]" fname))
      (org-display-inline-images t t))
     ;; insert image link with caption
     ((and  (eq 'C-drag-n-drop (car event))
            (eq 'file type)
            (string-match img-regexp fname))
      (insert "#+ATTR_ORG: :width 300\n")
      (insert (concat  "#+CAPTION: " (read-input "Caption: ") "\n"))
      (insert (format "[[%s]]" fname))
      (org-display-inline-images t t))
     ;; C-drag-n-drop to open a file
     ((and  (eq 'C-drag-n-drop (car event))
            (eq 'file type))
      (find-file fname))
     ((and (eq 'M-drag-n-drop (car event))
           (eq 'file type))
      (insert (format "[[attachfile:%s]]" fname)))
     ;; regular drag and drop on file
     ((eq 'file type)
      (insert (format "[[%s]]\n" fname)))
     (t
      (error "I am not equipped for dnd on %s" payload)))))

(define-key org-mode-map (kbd "<drag-n-drop>") 'my-dnd-func)
(define-key org-mode-map (kbd "<C-drag-n-drop>") 'my-dnd-func)
(define-key org-mode-map (kbd "<M-drag-n-drop>") 'my-dnd-func)
#+END_SRC

** Python settings

This lets us use the iPython kernel as the inferior Python process.

  #+name: modes
  #+BEGIN_SRC emacs-lisp
    ;; (setq python-shell-interpreter "ipython"
    ;;       python-shell-prompt-regexp "In \\[[0-9]+\\]: "
    ;;       python-shell-prompt-output-regexp "Out \\[[0-9]+\\]: "
    ;;       python-shell-completion-setup-code
    ;;       "from IPython.core.completerlib import module_completion"
    ;;       python-shell-completion-module-string-code
    ;;       "';'.join(module_completion('''%s'''))\n"
    ;;       python-shell-completion-string-code
    ;;       "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
  #+END_SRC

Some simple EIN customizations.

  #+name: modes
  #+BEGIN_SRC emacs-lisp
    ;; (setq ein:use-auto-complete 1)
    ;; (setq ein:console-args '("--gui=osx" "--matplotlib=osx" "--colors=Linux"))

    ;; (defun ein:load-notebooks ()
    ;;   (interactive)
    ;;   (ein:notebooklist-load)
    ;;   (ein:notebooklist-open))
  #+END_SRC
** Javascript / Typescript
  #+name: modes
  #+BEGIN_SRC emacs-lisp
    (use-package typescript-mode
      :init
      (require 'ansi-color)
      (defun colorize-compilation-buffer ()
        (ansi-color-apply-on-region compilation-filter-start (point-max)))
      (add-hook 'compilation-filter-hook 'colorize-compilation-buffer))
  #+END_SRC
** Clojure settings

Clojure-mode is useful for ~.edn~, ~.cljs~, and ~.cljx~ files as well.

  #+name: modes
  #+BEGIN_SRC emacs-lisp
    (dolist (mm '(("\\.edn\\'" . clojure-mode)
                  ("\\.cljs\\'" . clojure-mode)
                  ("\\.cljx\\'" . clojure-mode)))
      (add-to-list 'auto-mode-alist mm))
  #+END_SRC

We make the [[https://github.com/clojure-emacs/cider][Cider]] (Clojure IDE) experience a bit better.

  #+name: modes
  #+BEGIN_SRC emacs-lisp
    (require 'clojure-mode)
    (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
    (add-hook 'cider-repl-mode-hook 'paredit-mode)
    (setq nrepl-hide-special-buffers t)
    (setq cider-auto-select-error-buffer t)
  #+END_SRC

Some common Clojure functions look better with different indentation, so we set
those here.

  #+name: modes
  #+BEGIN_SRC emacs-lisp
    (define-clojure-indent
      (defroutes 'defun)
      (GET 2)
      (POST 2)
      (PUT 2)
      (DELETE 2)
      (HEAD 2)
      (ANY 2)
      (context 2)
      (form-to 1)
      (match 1)
      (are 2)
      (select 1)
      (insert 1)
      (update 1)
      (delete 1)
      (run* 1)
      (fresh 1)
      (extend-freeze 2)
      (extend-thaw 1))
  #+END_SRC
** Scala settings

   #+name: modes
   #+BEGIN_SRC emacs-lisp
     (use-package ensime
       :init
       (progn
         (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
         (setq ensime-sem-high-faces
               '((var . (:foreground "#ff2222"))
                 (val . (:foreground "#dddddd"))
                 (varField . (:foreground "#ff3333"))
                 (valField . (:foreground "#dddddd"))
                 (functionCall . (:foreground "#84BEE3"))
                 (param . (:foreground "#ffffff"))
                 (class . font-lock-type-face)
                 (trait . (:foreground "#084EA8"))
                 (object . (:foreground "#026DF7"))
                 (package . font-lock-preprocessor-face)))))
   #+END_SRC
** Coq
   #+name: coq-mode
   #+BEGIN_SRC emacs-lisp
     (load-file "/usr/local/share/emacs/site-lisp/proof-general/site-start.d/pg-init.el")
     (autoload 'coq-mode "coq" "Major mode for editing Coq vernacular." t)
     (setq auto-mode-alist (cons '("\\.v$" . coq-mode) auto-mode-alist))
     (eval-after-load 'coq-mode '(define-key coq-mode-map (kbd "C-c C-.") 'proof-goto-point))
   #+END_SRC
** Misc
   #+name: modes
   #+BEGIN_SRC emacs-lisp
     ;; annoying autocompile for scss is turned off
     (setq scss-compile-at-save nil)
   #+END_SRC
* Gittit
  ~gittit~ is a little library I wrote to connect local files to GitHub repos.

  These are our utility functions.

  #+name: gittit
  #+BEGIN_SRC emacs-lisp
    (defun gittit:base-github-url ()
      (let* ((git-url (shell-command-to-string "git config --get remote.origin.url"))
             (http-url (replace-regexp-in-string "git@" "" git-url))
             (http-url (replace-regexp-in-string "\.git" "" http-url))
             (http-url (replace-regexp-in-string ":" "/" http-url))
             (http-url (replace-regexp-in-string "\n" "" http-url)))
        http-url))

    (defun gittit:current-branch-name ()
      (replace-regexp-in-string "\n" "" (shell-command-to-string "git rev-parse --abbrev-ref HEAD")))

    (defun gittit:parent-directory (dir)
      (unless (equal "/" dir)
        (file-name-directory (directory-file-name dir))))

    (defun gittit:base-git-directory (filename)
      (let ((base-dir (file-name-directory filename)))
        (if (file-exists-p (concat base-dir ".git"))
          base-dir
          (gittit:base-git-directory (gittit:parent-directory base-dir)))))

    (defun gittit:github-url-for-file (filename)
      (format "http://%s/blob/%s/%s"
              (gittit:base-github-url)
              (gittit:current-branch-name)
              (replace-regexp-in-string (gittit:base-git-directory filename) "" filename)))

    (defun gittit:github-url-for-line (filename start &optional end)
      (format (concat (gittit:github-url-for-file filename) (if end "#L%s-L%s" "#L%s"))
              start
              end))
  #+END_SRC

  These are the public exports:

  #+name: gittit
  #+BEGIN_SRC emacs-lisp
    (defun github-url-for-line  (filename start &optional end)
      "Returns, echoes, and kills the GitHub URL for FILENAME between START and optionally END."
      (interactive (cons (buffer-file-name)
                         (if (use-region-p)
                            (list (region-beginning) (region-end))
                            (list (point)))))
      (let* ((url (gittit:github-url-for-file filename))
             (start-line (1+ (count-lines 1 start)))
             (url (if end
                      (format "%s#L%s-L%s" url start-line (count-lines 1 end))
                      (format "%s#L%s" url start-line))))
        (kill-new url)
        (message url)
        url))

    (defun browse-github-url-for-line (filename start &optional end)
      "Navigate to the GitHub URL for FILENAME between START and optionally END."
      (interactive (cons (buffer-file-name)
                         (if (use-region-p)
                            (list (region-beginning) (region-end))
                            (list (point)))))
      (browse-url (if end (github-url-for-line filename start end)
                    (github-url-for-line filename start))))
  #+END_SRC

  Under the [[http://www.apache.org/licenses/LICENSE-2.0.html][Apache 2.0 License]].
* Misc. Functions

  A bunch of little utility functions created here and elsewhere.
  #+name: functions
  #+BEGIN_SRC emacs-lisp
    (defun ido-recentf-open ()
      "Use `ido-completing-read' to \\[find-file] a recent file"
      (interactive)
      (if (find-file (ido-completing-read "Find recent file: " recentf-list))
          (message "Opening file...")
        (message "Aborting")))

    (defun clear-shell-buffer ()
      "Clear the current buffer"
      (interactive)
      (let ((comint-buffer-maximum-size 0))
         (comint-truncate-buffer)))

    (defun osx:copy-region (start end)
      "Copy the region to OSX's clipboard."
      (interactive (list (region-beginning) (region-end)))
      (shell-command-on-region start end "pbcopy")
      (message "Copied to OSX clipboard!"))

    (defun osx:paste ()
      "Copy the region to OSX's clipboard."
      (interactive)
      (insert (shell-command-to-string "pbpaste"))
      (message "Pasted from OSX clipboard!"))

    (defun osx:copy-kill ()
      "Copy the current kill text to OSX's clipboard."
      (interactive)
      (with-temp-buffer
        (yank)
        (shell-command-on-region 1 (point-max) "pbcopy")))

    (defun set-exec-path-from-shell-PATH ()
      (let ((path-from-shell (replace-regexp-in-string
                              "[ \t\n]*$"
                              ""
                              (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
        (setenv "PATH" path-from-shell)
        (setq eshell-path-env path-from-shell) ; for eshell users
        (setq exec-path (split-string path-from-shell path-separator))))

    ;;http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
    (defun smarter-move-beginning-of-line (arg)
      "Move point back to indentation of beginning of line.

    Move point to the first non-whitespace character on this line.
    If point is already there, move to the beginning of the line.
    Effectively toggle between the first non-whitespace character and
    the beginning of the line.

    If ARG is not nil or 1, move forward ARG - 1 lines first.  If
    point reaches the beginning or end of the buffer, stop there."
      (interactive "^p")
      (setq arg (or arg 1))

      ;; Move lines first
      (when (/= arg 1)
        (let ((line-move-visual nil))
          (forward-line (1- arg))))

      (let ((orig-point (point)))
        (back-to-indentation)
        (when (= orig-point (point))
          (move-beginning-of-line 1))))

    (defun endless/load-gh-pulls-mode ()
      "Start `magit-gh-pulls-mode' only after a manual request."
      (interactive)
      (require 'magit-gh-pulls)
      (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls)
      (magit-gh-pulls-mode 1)
      (magit-gh-pulls-reload))

    (defun revert-this-buffer ()
      (interactive)
      (revert-buffer nil t t)
      (message (concat "Reverted buffer " (buffer-name))))

    (defun opam-env ()
      (interactive nil)
      (dolist (var (car (read-from-string
                         (shell-command-to-string "opam config env --sexp"))))
        (setenv (car var) (cadr var)))
      (setq exec-path (append (parse-colon-path (getenv "PATH"))
                              (list exec-directory))))
  #+END_SRC
* Bindings

  Global and some mode-specific bindings that need to be cleaned up.

  #+name: bindings
  #+BEGIN_SRC emacs-lisp
    (bind-keys ("<f1>" . eshell)
               ("<f3>" . occur)
               ("<f5>" . calc)
               ("<f6>" . revert-this-buffer)
               ("C-c M-w" . whitespace-mode)
               ("M-j" . (lambda () (interactive) (join-line -1)))
               ("C-x t" . (lambda () (interactive) (insert "TODO(ihodes): ")))
               ("M-s-≥" . mc/mark-next-lines)
               ("C-x w" . delete-trailing-whitespace)
               ("C-x C-d" . ido-dired)
               ("C-c C-e" . eval-buffer)
               ("C-x C-b" . ibuffer)
               ("C-x C-l" . goto-line)
               ("C-s" . isearch-forward-regexp)
               ("C-r" . isearch-backward-regexp)
               ("s--" . text-scale-adjust)
               ("s-=" . text-scale-adjust))

    (define-key 'help-command "A" #'apropos) ;; (C-h a)

    (eval-after-load #'comint-mode-hook
      '(progn
         (define-key comint-mode-map (kbd "C-c C-t") 'comint-truncate-buffer)))

    ;; remap C-a to `smarter-move-beginning-of-line'
    (global-set-key [remap move-beginning-of-line]
                    'smarter-move-beginning-of-line)

    (eval-after-load 'js
      '(progn
         (define-key js-mode-map (kbd "C-x ;")
           (lambda ()
             (interactive)
             (insert "console.log();")
             (backward-char 2)))))


  #+END_SRC
* Projects

This is a simple & hacky way to start asynchronous processes associated with
projects I frequently work on.

** TODO Manage a list of processes per project, and commands for restarting them etc. Upstart?
** CycleDash
  Found on [[https://github.com/hammerlab/cycledash][GitHub]].
  #+name: projects
  #+BEGIN_SRC emacs-lisp
    (defun cycledash:start-server ()
      "Start the CycleDash server."
      (interactive)
      (async-shell-command "cd ~/workspace/cycledash/ && source venv/bin/activate && ./run.sh"
                           "*CycleDash:./run.sh*"))

    (defun cycledash:start-worker ()
      "Start a CycleDash worker named WORK."
      (interactive)
      (async-shell-command "cd ~/workspace/cycledash/ && source venv/bin/activate && ./worker.sh WORK"
                           "*CycleDash:./worker.sh*"))

    (defun cycledash:start-gulp ()
      "Start the gulp dev js builder."
      (interactive)
      (async-shell-command "cd ~/workspace/cycledash/ && gulp"
                           "*CycleDash: gulp*"))

    (defun cycledash:start ()
      "Start all cycledash services"
      (interactive)
      (dolist (start '(cycledash:start-server cycledash:start-worker cycledash:start-gulp))
        (funcall start)))

    (defun cycledash:python-tests ()
      "Run the Python tests"
      (interactive)
      (async-shell-command "cd ~/workspace/cycledash/ && source venv/bin/activate && source ENV.sh && nosetests tests/python"
                           "*CycleDash: python nosetests*"))

    (defun rgc:start-server ()
      "Start the RGC Harvest server."
      (interactive)
      (async-shell-command "cd ~/workspace/rgc/rgc-site/ && source venv/bin/activate && ./bin/manage.py runserver 8080"
                           "*Harvest: runserver 8080*"))

    (defun healthtracker:start-server ()
      "Start the Healthtracker server."
      (interactive)
      (async-shell-command "cd ~/workspace/healthtracker/ && source venv/bin/activate && source env.sh && python run.py"
                           "*Healthtracker: run.py 5050*"))


  #+END_SRC
** VCF.js
  Found on [[https://github.com/ihodes/vcf.js][GitHub]].
  #+name: projects
  #+BEGIN_SRC emacs-lisp
    (defun vcf-js:test ()
      "Run the vcf test suite"
      (interactive)
      (async-shell-command "cd ~/workspace/vcf.js/ && mocha test/test.js"
                           "*vcf.js: tests*"))

    (defun vcf-js:server ()
      "Run the vcf test server"
      (interactive)
      (async-shell-command "cd ~/workspace/vcf.js/ && http-server"
                           "*vcf.js: server*"))
  #+END_SRC
** Idiogrammatik.js

   Found on [[https://github.com/hammerlab/idiogrammatik][GitHub]].

   #+name: projects
   #+BEGIN_SRC emacs-lisp
    (defun idiogrammatik:server ()
      "Run the idiogrammatik server"
      (interactive)
      (async-shell-command "cd ~/workspace/idiogrammatik/ && http-server -p 8989"
                           "*idiogrammatik: server*"))
   #+END_SRC
* Configuration file layout

  Here I define the ~emacs.el~ file generated by the code in this org file.

  The below block describes how the code above should be organized within the
  generated ~emacs.el~.

  #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export :exports code
    ;;;; This file generated from `emacs.org` in this directory.

    <<init>>
    <<prelude>>
    <<look-and-feel>>
    <<packages>>
    <<modes>>
    <<coq-mode>>
    <<org-mode>>
    <<functions>>
    <<defaults>>
    <<gittit>>
    <<bindings>>
    <<journaling>>
    <<projects>>
  #+END_SRC
* Archived
